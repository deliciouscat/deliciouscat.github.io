<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>잡부를 지향합니다.</title>
    <link>https://deliciouscat.github.io/</link>
    <description>Recent content on 잡부를 지향합니다.</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 21 Sep 2025 21:20:00 +0900</lastBuildDate>
    <atom:link href="https://deliciouscat.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Judith Butler - 공공에서의 인문학의 미래</title>
      <link>https://deliciouscat.github.io/posts/resources/judithbutler-humanitystudy/</link>
      <pubDate>Sun, 21 Sep 2025 21:20:00 +0900</pubDate>
      <guid>https://deliciouscat.github.io/posts/resources/judithbutler-humanitystudy/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://youtu.be/EaF4ODAon6o?si=Tev74FEJNBMotous&#34;&gt;유튜브&lt;/a&gt;에서의 언급을 통해 접한 자료입니다.&lt;br&gt;&#xA;&lt;a href=&#34;https://direct.mit.edu/daed/article/151/3/40/112684/The-Public-Futures-of-the-Humanities&#34;&gt;영어원문&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;중간의 소제목은 가독성을 위해 임의로 삽입함.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;인문학의 가치를 입증하려는 도전은 인문학이 다른 학문 분야에 기여한다는 점을 보여주는 것만으로는 완전히 달성될 수 없다. 이러한 논리는 다른 학문 분야, 특히 STEM 분야의 가치를 전제로 하며, 인문학을 기껏해야 도구적 가치만을 지닌 부차적 지위로 격하시킨다. 진정한 과제는 도구성과 수익성 모두에 환원될 수 없는 가치들을 살아있게 유지함으로써 인문학이 모든 지식 분야에 기여할 수 있는 고유한 측면을 보여주는 것이다. 공공인문학은 이러한 과제를 성취할 수 있는 최고의 기회를 제공한다. 공공인문학은 인문학이 공론장에 무엇을 제공할 수 있는지 보여줄 뿐만 아니라, 다양한 공중들이 대학 내에서 인문학의 역할을 어떻게 규정하고 있는지도 드러내기 때문이다. 더 나아가, 공공인문학은 대학의 사명을 재정향시킬 잠재력을 가지고 있다. 인문학이 재정적 지원을 받지 못하는 이유 중 하나는 인문학이 신자유주의의 헤게모니와 그 시장 지표들 및 금융적 합리성에 도전할 힘을 지니고 있기 때문이다. 대학들은 문학 및 예술 행사를 포함한 공공예술과 더욱 적극적으로 관계를 맺어야 하며, 공중을 위한 열린 토론을 통해 공중이 왜 인문학을 필요로 하는지, 그리고 이미 인문학의 실천에 참여하고 있는지를 보여주어야 한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vibe Coding을 위한 디자인 패턴 - 복합체(Composite)</title>
      <link>https://deliciouscat.github.io/posts/design-pattern/designpattern-composite/</link>
      <pubDate>Sat, 20 Sep 2025 18:00:00 +0900</pubDate>
      <guid>https://deliciouscat.github.io/posts/design-pattern/designpattern-composite/</guid>
      <description>&lt;p&gt;Composite Pattern(복합체 패턴)은 객체들을 트리 구조로 구성하여 부분과 전체로 계층을 표현하는 디자인 패턴이다.&#xA;클라이언트가 &lt;strong&gt;개별 객체&lt;/strong&gt;와 &lt;strong&gt;복합 객체&lt;/strong&gt;를 동일한 방식으로 다룰 수 있다.&lt;/p&gt;&#xA;&lt;p&gt;예를 들어:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Component&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;(self): &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Leaf&lt;/span&gt;(Component):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;(self): &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Composite&lt;/span&gt;(Component):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__init__&lt;/span&gt;(self): self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;children &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(self, c): self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;children&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(c)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;(self): &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sum(c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute() &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;children)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 클라이언트는 Leaf와 Composite를 구분하지 않음&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;items &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [Leaf(), Composite(), Leaf()]  &lt;span style=&#34;color:#75715e&#34;&gt;# 모두 Component&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;items[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Leaf())    &lt;span style=&#34;color:#75715e&#34;&gt;# Composite에 Leaf 추가: children = [leaf1]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;items[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Leaf())    &lt;span style=&#34;color:#75715e&#34;&gt;# Composite에 Leaf 추가: children = [leaf1, leaf2]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;total &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum(item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute() &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; items)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(total)  &lt;span style=&#34;color:#75715e&#34;&gt;# 1 + 2 + 1 = 4&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;-&amp;gt; &lt;code&gt;Leaf&lt;/code&gt;와 &lt;code&gt;Composite&lt;/code&gt;는 둘 다 &lt;code&gt;Component&lt;/code&gt;(execute 메서드를 가진)를 상속해서 &lt;code&gt;execute&lt;/code&gt; 메서드를 호출할 수 있고, 위계에 상관없이 메서드를 호출 가능하다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hello World! github 블로그 초기설정 테스트중입니다.</title>
      <link>https://deliciouscat.github.io/posts/blah-blah/hello-world/</link>
      <pubDate>Fri, 19 Sep 2025 10:00:00 +0900</pubDate>
      <guid>https://deliciouscat.github.io/posts/blah-blah/hello-world/</guid>
      <description>&lt;h1 id=&#34;안녕하세요&#34;&gt;안녕하세요!&lt;/h1&gt;&#xA;&lt;p&gt;Hugo와 Mainroad 테마를 사용한 첫 번째 블로그 포스트입니다.&#xA;&lt;a href=&#34;https://minyeamer.github.io/blog/hugo-blog-1/&#34;&gt;참고자료&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;세팅하면서 고생한 부분: &lt;code&gt;en-us&lt;/code&gt;를 &lt;code&gt;ko-kr&lt;/code&gt;로 바꾸면 안되네요,, github 블로그 만드시는 분들은 theme에서 지원하는 언어를 곡 확인하시기 바랍니다. 어처피 영어로 해도 한국어 사용은 되네요.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
